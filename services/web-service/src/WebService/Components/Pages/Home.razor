@page "/"
@using WebService.GraphQL
@using WebService.Services
@inject IComplimentShopClient GraphQLClient
@inject NavigationManager Navigation
@inject AnalyticsService Analytics
@rendermode InteractiveServer

<PageTitle>Compliment Shop - Premium Compliments</PageTitle>

<div class="container">
    <div class="header-section fade-in">
        <h1 class="text-title">âœ¨ Premium Compliments</h1>
        <p class="text-body">Discover our curated collection of heartfelt compliments</p>

        <div class="filter-section mt-3">
            <button class="btn-glass @(selectedCategory == null ? "active" : "")" @onclick="@(() => FilterByCategory(null))">
                All
            </button>
            <button class="btn-glass @(selectedCategory == "Appearance" ? "active" : "")" @onclick="@(() => FilterByCategory("Appearance"))">
                Appearance
            </button>
            <button class="btn-glass @(selectedCategory == "Professional" ? "active" : "")" @onclick="@(() => FilterByCategory("Professional"))">
                Professional
            </button>
            <button class="btn-glass @(selectedCategory == "Personal" ? "active" : "")" @onclick="@(() => FilterByCategory("Personal"))">
                Personal
            </button>
        </div>
    </div>

    @if (loading)
    {
        <div class="product-grid">
            @for (int i = 0; i < 6; i++)
            {
                <SkeletonLoader />
            }
        </div>
    }
    else if (error != null)
    {
        <div class="glass-panel-lg mt-4 p-4 fade-in">
            <h3 class="text-subtitle">Unable to load products</h3>
            <p class="text-body">@error</p>
            <button class="btn-primary mt-2" @onclick="LoadProducts">Try Again</button>
        </div>
    }
    else if (products != null && products.Any())
    {
        <div class="product-grid">
            @foreach (var product in products)
            {
                <ProductCard Product="product" OnProductClick="NavigateToProduct" />
            }
        </div>
    }
    else
    {
        <div class="glass-panel-lg mt-4 p-4 fade-in">
            <h3 class="text-subtitle">No products found</h3>
            <p class="text-body">Try adjusting your filters</p>
        </div>
    }
</div>

@code {
    private IReadOnlyList<IGetProducts_Products_Items>? products;
    private bool loading = true;
    private string? error;
    private string? selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        await Analytics.TrackPageViewAsync("Home - Product Listing", "/");
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            loading = true;
            error = null;
            StateHasChanged();

            var result = await GraphQLClient.GetProducts.ExecuteAsync(selectedCategory, null, null);

            if (result.Data != null && result.Errors == null)
            {
                products = result.Data.Products?.Items;
            }
            else if (result.Errors != null && result.Errors.Count > 0)
            {
                error = string.Join(", ", result.Errors.Select(e => e.Message));
            }
        }
        catch (Exception ex)
        {
            error = $"Failed to load products: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task FilterByCategory(string? category)
    {
        selectedCategory = category;
        await LoadProducts();
    }

    private void NavigateToProduct(IGetProducts_Products_Items product)
    {
        Navigation.NavigateTo($"/product/{product.Id}");
    }
}

<style>
    .header-section {
        text-align: center;
        margin-bottom: 3rem;
    }

    .filter-section {
        display: flex;
        gap: 1rem;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn-glass.active {
        background: var(--accent-blue);
        color: white;
        border-color: var(--accent-blue);
    }

    .product-grid {
        animation-delay: 0.2s;
    }
</style>
